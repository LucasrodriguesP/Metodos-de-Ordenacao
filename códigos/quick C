#include <stdio.h>

void swap(int *a, int *b) {
  int t = *a;
  *a = *b;
  *b = t;
}

int partition(int array[], int low, int high) {
  
  // pivo
  int pivot = array[high];
  int i = (low - 1);

  // comparar com o pivo
  for (int j = low; j < high; j++) {
    if (array[j] <= pivot) {
        //se o elemento for menor que o pivo, troca ele
      i++;
      // troca
      swap(&array[i], &array[j]);
    }
  }
  
  swap(&array[i + 1], &array[high]);
  
  // partição
  return (i + 1);
}

void quickSort(int array[], int low, int high) {
  if (low < high) {
    int pi = partition(array, low, high);
     
     //chamada para a esquerda do pivo
    quickSort(array, low, pi - 1);
    
    // chamada para a direita do pivo
    quickSort(array, pi + 1, high);
  }
}

void printArray(int array[], int size) {
  for (int i = 0; i < size; ++i) {
    printf("%d  ", array[i]);
  }
  printf("\n");
}

int main() {
  int data[] = {8, 7, 2, 1, 0, 9, 6};
  
  int n = sizeof(data) / sizeof(data[0]);
  
  printf("Unsorted Array\n");
  printArray(data, n);
  
  // faz a ordenação
  quickSort(data, 0, n - 1);
  
  printf("Sorted array in ascending order: \n");
  printArray(data, n); //printa em ordem crescente(ordenao)
}
//codigo por programiz/merge-sort
